name: Build and Deploy Server
on:
  - "push"
env:
  ECR_REPOSITORY: costock/server
  ECS_CLUSTER: costock-server-v1
  ECS_SERVICE: costock-server-v1
  ECS_TASK_DEFINITION: costock-server
  ECS_CONTAINER_NAME: server
  DOCKERFILE: "./build.dockerfile"
jobs:
  build-docker-image-dev:
    if: ${{ github.ref != 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Make .env
        run: |
          touch .env
          echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env
          echo KAKAO_REST_API_KEY="${{ secrets.KAKAO_REST_API_KEY }}" >> .env
          echo DATABASE_HOST="${{ secrets.DATABASE_HOST }}" >> .env
          echo DATABASE_NAME="${{ secrets.DATABASE_NAME }}" >> .env
          echo DATABASE_USER="${{ secrets.DATABASE_USER }}" >> .env
          echo DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo ENDPOINT="${{ vars.ENDPOINT }}" >> .env
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
      - name: Build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          cache-from: type=gha,scope=${{ github.ref }}:server
          cache-to: type=gha,mode=max,scope=${{ github.ref }}:server
  build-docker-image-stable:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - run: |
          ref="${github_ref////-}"
          echo $ref
          echo "::set-env name=ref::$ref"
        env:
          github_ref: ${{ github.ref }}
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      - name: Make .env
        run: |
          touch .env
          echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env
          echo KAKAO_REST_API_KEY="${{ secrets.KAKAO_REST_API_KEY }}" >> .env
          echo DATABASE_HOST="${{ secrets.DATABASE_HOST }}" >> .env
          echo DATABASE_NAME="${{ secrets.DATABASE_NAME }}" >> .env
          echo DATABASE_USER="${{ secrets.DATABASE_USER }}" >> .env
          echo DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo ENDPOINT="${{ vars.ENDPOINT }}" >> .env
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Copy credentials to Docker Buildx
        uses: docker/login-action@v2
        with:
          registry: ${{ steps.login-ecr.outputs.registry }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
      - name: Build, tag and push
        uses: docker/build-push-action@v4
        env:
          ECR: ${{ steps.login-ecr.outputs.registry }}
        with:
          context: .
          push: true
          tags: |
            ${{ env.ECR }}/${{ env.ECR_REPOSITORY }}:stable
            ${{ env.ECR }}/${{ env.ECR_REPOSITORY }}:latest
          file: ${{ env.DOCKERFILE }}
          cache-from: type=gha,scope=${{ github.ref }}:client
          cache-to: type=gha,mode=max,scope=${{ github.ref }}:client
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json
      - name: Render Amazon ECS task definition
        id: render-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.ECS_CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:stable
      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-container.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
